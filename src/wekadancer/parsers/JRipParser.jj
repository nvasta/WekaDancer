/* calculator0.jj An interactive calculator. */


options {
	STATIC = false ;
}
PARSER_BEGIN(JRipParser)
	package wekadancer.parsers;

	import PandaLib.*;
	
	public class JRipParser {
	
		public Group group;
		public String device;
		public int PIDCount = 1;
		
		public JRipParser(String device, java.io.InputStream stream) {
			this.device = new String(device);
			group = new Group("Disc_"+this.device, "0");
			jj_input_stream = new SimpleCharStream(stream, 1, 1);
			token_source = new JRipParserTokenManager(jj_input_stream);
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < jj_la1.length; i++)
				jj_la1[i] = -1;
		}

		public JRipParser(String device, java.io.Reader stream) {
			this.device = new String(device);
			group = new Group("Disc_"+this.device, "0");
			jj_input_stream = new SimpleCharStream(stream, 1, 1);
			token_source = new JRipParserTokenManager(jj_input_stream);
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < jj_la1.length; i++)
				jj_la1[i] = -1;
		}
	}
PARSER_END(JRipParser)

SKIP : { " " }
SKIP : { "\t" | "\n" | "\r" | "\f" }
TOKEN : { < CHILD : "|" > }
TOKEN : { < THEN : ( ":" | "=>") > }
TOKEN : { < AND : ("AND" | "and") > }
TOKEN : { < OR : ("OR" | "or") > }
TOKEN : { < OPR : "(" > }
TOKEN : { < CPR : ")" > }
TOKEN : { < DIV : "/" > }
TOKEN : { < GT : ">" > }
TOKEN : { < LT : "<" > }
TOKEN : { < EQ : ("==" | "=") > }
TOKEN : { < LE : "<=" > }
TOKEN : { < GE : ">=" > }
TOKEN : { < NE : "!=" > }
TOKEN : { < INT : "0" | ("-")? ["1"-"9"](["0"-"9"])* > }
TOKEN : { < HEX : ["0"-"9","A"-"F"] (["0"-"9","A"-"F"])* > }
TOKEN : { < ID : (["a"-"z","A"-"Z","_","0"-"9"])*  (["a"-"z","A"-"Z","_"]) (["a"-"z","A"-"Z","_","0"-"9"])* > }
TOKEN : { < BOOL : "true" | "false" | "TRUE" | "FALSE" > }
TOKEN : { < FLOAT : ("-")? (["0"-"9"])+ "." (["0"-"9"])+ ("E" ("-")? (["0"-"9"])+)? ("D")? > }
TOKEN : { < STRING : "\"" (["a"-"z","A"-"Z","_","0"-"9",":","'","$","%"])* "\"" > }
TOKEN : { < FUNCTION : ( <ID>  | <HEX> ) ("." <ID>)? <OPR> ( (<ID> | <STRING> | <INT> | <HEX> ){1} ("," (<INT> | <ID> | <STRING> | <HEX> ){1} )*)? <CPR> > }


void RuleSet() :
{}
{
	(
		Rule()
	)*
	<EOF>
}


void Rule() :
{
	ConditionItem ci;
	PolicyAction a;
}
{	
	ci = Conditions()
	<THEN>
	a = Function()
	{
		//If a context item has been actually specified
		if(ci != null) {
			Policy policy = new Policy();
      policy.setPID(String.format("PID%04d", PIDCount++));
      //Add discovered context
      policy.setConditions(ci);
      //Add the action in the policy
      policy.setAction(a);
      //Add the policy in the group
      group.addPolicy(policy);
		}
	}
}


ConditionItem Conditions() :
{
	ConditionItem ci = null;
	Condition c = null;
	Token conj;
}
{
	(
		c = Condition()
		{
			ci = c;
		}
		
		(
			(conj = <AND> | conj = <OR>)
			c = Condition()
			
			{
				if(ci instanceof ConditionGroup) {
						((ConditionGroup)ci).addCondition(c);
				}
				else {
						ConditionGroup newgroup = new ConditionGroup();
						newgroup.addCondition((Condition)ci);
						newgroup.addCondition(c);
						newgroup.setConjunction(conj.image);
						ci = newgroup;
				}	
			}
		)*
	)?
	{
		return ci;
	}
}


Condition Condition() :
{
	Condition c;
	Token id;
	Token opp;
	Token v;
}
{
	<OPR>
	id = <ID>
	( opp = <GT> | opp = <LT> | opp = <EQ> | opp = <LE> | opp =  <GE> | opp = <NE>)
	( v = <FLOAT>  | v = <INT> | v = <ID> )
	
	<CPR>
	{
		c = new Condition(id.image,opp.image,v.image);
		return c;
	}
}


PolicyAction Function() :
{
	Token f;
}
{
	"Action="
	f = <FUNCTION>
	Success()
	{ 
		//Create a new action
		PolicyAction action = new PolicyAction(this.device,"Unknown",f.image,"");	
		return action;
	} 
}


void Success() :
{ 
	Token t;
	Token p;
}
{
	<OPR>
	t = <FLOAT>
	(
		<DIV> 
		p = <FLOAT>
	)*
	<CPR>
}





